/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 07.06.2021 07:11:32

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 41472;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[15];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[7];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,32,32,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 1024, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[32] = { 3532, 4706, 1565, -1813, -2572, 443, 4690, 1915, 758, -195, -674, 924, 6470, 225, 1064, 3397, 665, 2246, -1285, -3319, 897, -4166, 1067, -841, -179, -894, -1946, 583, 1308, -1147, -280, 5014, };
const TfArray<1, int> tensor_dimension2 = { 1, { 32 } };
const TfArray<32, float> quant2_scale = { 32, { 4.5259380385687109e-06, 4.0655049815541133e-06, 4.8239594434562605e-06, 4.2260621739842463e-06, 4.2393503463244997e-06, 4.4152047848911025e-06, 4.0242539398605004e-06, 4.3739942157117184e-06, 3.7202992189122597e-06, 3.8890516407263931e-06, 4.0663057916390244e-06, 4.1919379327737261e-06, 4.4507924030767754e-06, 4.6022960304981098e-06, 4.2927636059175711e-06, 4.5403344302030746e-06, 4.1814796531980392e-06, 4.4674484342976939e-06, 3.9108222154027317e-06, 4.4171465560793877e-06, 4.4648659240920097e-06, 3.7008344406785909e-06, 4.649585662264144e-06, 4.4211014937900472e-06, 4.1975035856012255e-06, 4.4737294047081377e-06, 4.3234990698692854e-06, 4.3111999730172101e-06, 4.3563977669691667e-06, 4.6494274101860356e-06, 4.19052412325982e-06, 4.2178430703643244e-06, } };
const TfArray<32, int> quant2_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[16] = { 2287, -3805, 1515, 703, 3979, -4031, 1771, -189, 5396, -1118, -2235, -1032, -3772, 1660, 2153, 1761, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 3.2467091841681395e-06, 3.1927306736179162e-06, 3.3580033687030664e-06, 3.0694391170982271e-06, 3.139300588372862e-06, 3.3687788345559966e-06, 3.2812370136525715e-06, 3.222400891900179e-06, 3.193498514519888e-06, 3.3405992780899396e-06, 2.8457166081352625e-06, 2.8562101306306431e-06, 3.3313476706098299e-06, 3.1775430215930101e-06, 3.2004982131184079e-06, 3.0518619951180881e-06, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[2] = { 4899, -4899, };
const TfArray<1, int> tensor_dimension4 = { 1, { 2 } };
const TfArray<1, float> quant4_scale = { 1, { 2.4563482838857453e-06, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[2*1024] = { 
  -16, -127, 1, -79, 33, -59, 36, 43, 19, 3, -22, 35, -65, -2, 12, -16, 25, 3, 17, -68, 66, 93, 0, 11, -42, -118, 72, -67, 90, 60, 2, 82, 67, 39, -63, -73, 43, -86, 92, 33, -56, -12, -14, 35, -62, -67, 94, 14, 34, -106, 69, 14, 107, 65, -44, 6, 67, -125, 61, 36, 28, -51, 20, 65, 13, -34, 2, -94, 99, -73, -4, 69, -23, -116, -87, 41, -19, 56, -7, -63, -22, -26, 16, -52, -54, -17, 57, -69, 13, -91, -84, -46, -78, 14, 6, 85, 75, 13, 73, 8, 20, -80, 95, -52, 35, -7, 8, 45, -47, 18, -42, -39, 93, -30, -42, 49, -43, -72, -35, -54, 49, -73, 4, 73, 10, 38, 105, 60, 30, -100, 29, 45, 84, -2, 59, 44, 78, -64, 81, 14, 53, 33, 48, 47, -56, -115, 71, 53, 27, 16, -47, 2, 45, -66, 18, 84, -2, 17, 113, -54, 0, -29, 35, 38, -7, -48, -77, 32, -54, -81, 19, -7, -62, 53, 106, -47, 49, 8, -29, 14, -23, -21, 74, -65, -43, 33, -31, 18, -69, -6, 28, 43, -71, -79, -49, -40, 87, 44, 51, -22, 70, -58, -52, 15, -31, -1, -52, 17, 107, -119, 66, 62, -53, -17, -20, 25, -48, -41, 10, -74, -35, 59, 46, 88, 74, -112, 61, 6, 93, 60, 11, -49, 48, 57, -60, -30, -4, -63, 75, 75, 5, -59, -20, 38, 10, 50, -36, -100, -60, 35, 3, -47, -14, 40, 57, -25, 81, -87, 48, 76, -57, 72, 71, -111, -47, 20, -61, -64, -38, -104, 113, -18, 74, 2, -83, 41, -54, 59, 74, -16, -46, 32, 50, -3, -44, 25, 25, 73, -14, -19, 51, 57, -61, 10, -72, -87, -16, 59, 84, 33, -2, -93, -36, 64, -65, 42, -74, -37, -24, -30, 67, -50, -34, -42, -4, 36, 71, 93, -61, 6, -20, 56, -40, -4, 53, -73, -36, 16, 27, -42, 32, 4, -34, 73, -52, -64, -77, -47, -18, 108, -39, 72, 27, 11, -2, -119, 52, 93, -7, -74, 39, 20, 47, 36, 82, -65, -11, -56, -78, -70, 8, 30, 70, 62, -66, 17, 67, 33, 91, -122, 77, 38, 35, -24, 56, -125, 62, -90, -44, -16, 85, -44, 113, 14, -9, -26, -9, 17, 120, 39, 39, -118, 62, -21, 66, 27, 68, 52, -17, 48, 89, 17, 51, 39, 74, 28, -14, -72, 61, -35, 54, -67, 90, -2, 81, -1, -77, -43, -83, -81, 11, -60, -49, 47, 19, -116, 41, -25, 74, 20, 4, -25, 90, 0, -29, -11, 63, -45, -69, 56, 43, -80, -83, -85, -24, -85, -46, -5, -39, -89, -23, -44, -34, 85, -37, -33, 22, -116, 27, 31, 82, 5, 43, 86, -32, 2, 78, 88, -56, 27, 92, -81, 101, -92, 35, -69, -66, 8, -59, 7, -82, 45, 55, -56, -4, 77, -67, -47, 23, -13, -30, -59, 45, 1, -5, -6, -43, -104, 20, -65, 44, -10, -79, -85, -11, -110, 62, -15, 51, 70, -40, -22, 76, -2, 27, 80, -58, -2, -21, 8, -61, -108, 23, 12, -34, -33, 98, 54, -11, -114, -41, 51, 74, -92, -63, 21, 40, -71, 67, -83, 85, -69, -42, 83, 7, -15, -84, -71, -39, -74, -43, -37, 83, -52, 43, -33, 67, -32, -58, 34, 21, -56, -45, -80, 22, -45, -15, 32, 80, -99, 18, 66, 92, 37, 76, 45, -12, 49, -57, 36, 88, 92, -79, -32, 5, 64, -75, -61, 80, -75, 31, -28, 42, 25, -35, 9, -25, -56, 40, -80, 101, 64, -44, 70, 76, 41, 4, -69, 11, 52, 77, 60, 19, -78, -4, 44, -43, -114, -26, 72, -4, 89, -56, -18, 11, -92, 82, 30, 29, -53, -91, -101, -66, -69, 72, 3, 71, 45, 53, -15, -60, -120, 54, 26, 40, -96, 19, -25, 35, -72, -92, -47, 20, 66, 29, -93, 47, -23, -75, -61, 46, -88, -30, -67, 63, 52, 89, 19, 9, 24, 18, -31, 49, -28, 4, -11, -38, 14, 101, -110, 32, -27, -6, -26, 72, -7, 77, -50, 31, -8, 72, 27, 30, -70, -101, -58, 24, -12, -19, -75, 40, -89, -43, -84, -11, 43, -58, 14, 3, 59, -18, -93, 39, -107, 11, 65, 53, -60, -65, 49, -18, -56, 78, 33, -66, -87, -54, -71, 22, 18, 78, 72, -87, 13, 84, 32, -13, -71, -14, 80, -43, 80, -9, -42, 63, -107, -35, -89, 41, 63, 9, -14, 84, -88, 71, -83, 14, -23, -84, 45, 64, 69, -45, -58, -82, 25, -20, -64, -41, -26, -72, 54, 104, -98, 83, 71, 69, -103, 63, 15, 78, 40, 50, -21, -17, -113, -93, 54, 21, 11, -55, -81, 12, 55, -9, 45, -53, -25, 52, 6, 4, 51, -61, 64, -67, -28, -25, -103, -40, -5, -84, 40, -28, 9, -53, 61, 88, 35, -38, 26, 76, -29, -54, 23, -67, -19, 66, -85, 26, 16, 20, -45, 29, -100, 13, -49, 46, -27, 36, -25, -67, -113, -59, -90, -86, -52, 21, 26, 65, 62, -32, -59, -14, -73, 73, -32, 85, -89, -44, -83, -23, -82, 82, 66, -55, -77, -41, -8, 42, 62, 19, -84, 84, -11, 22, -70, -35, 37, -24, 56, 3, -55, -22, -68, -14, 50, 32, 1, -57, -4, 10, -62, -21, 88, 100, 76, -85, -75, -1, -30, -24, -34, 80, 63, 64, 0, 25, -20, -83, 22, -48, 113, -2, 27, 26, -9, 25, 30, 53, -80, -67, -108, 65, 79, -67, -64, 0, 68, 77, -84, 80, -91, -62, 51, 16, 8, 38, -120, -75, -42, 74, 75, 16, 28, 59, -12, 72, -11, 70, 22, -71, 21, 48, -6, 36, -30, -74, 50, -64, -35, -38, -4, -74, 23, 35, -73, -67, 21, 58, 20, 31, -13, -63, 16, -91, -9, 2, -8, 32, 52, -48, -14, 52, -9, -56, 25, -61, 24, -34, 77, 20, 1, -71, -31, 62, -64, -88, 70, 33, 27, 86, 8, -41, 23, -103, -80, -96, -34, 31, -70, 77, 41, -84, -69, -22, -70, -78, -49, 80, -88, -76, -87, -69, -56, 
  42, -48, -18, 73, 47, 47, 49, 12, 4, 29, 28, -8, 61, 8, -45, -82, 42, -66, 90, 81, -112, -63, -54, -40, -89, 66, 93, 6, -72, -17, 30, 30, -78, -20, 79, -4, -36, -15, -28, -65, -45, 84, 53, 87, 6, -24, -27, 32, 36, 113, -10, 65, -100, -67, 11, 81, -11, 3, 41, -44, -25, -86, -10, -10, -65, 84, -35, -85, -113, -8, 76, -1, 13, -28, 14, -33, -29, -11, -70, 25, -58, 60, 89, -23, -5, -38, 61, 21, -97, -33, 72, -83, 41, 25, 10, -79, -19, 93, 78, 10, -29, 75, 34, 45, 53, 34, -13, -26, -69, -61, 70, 41, -53, -32, 57, -63, -21, -70, 37, 104, 30, 81, 24, 9, -46, -90, -61, -71, -43, 94, 0, 52, -32, -46, -69, 11, 65, 62, 19, 41, -58, 68, -45, -49, 74, 27, 2, 76, 55, -53, 41, -54, 58, 105, 80, -54, 59, -53, -47, -83, -6, 99, 78, 24, 57, 21, 72, 73, -99, -35, 82, -45, -83, 8, 43, -34, 36, 77, 37, 59, -118, -22, 23, 73, -120, 94, 40, 44, 49, 39, -85, -44, 73, 86, -28, -53, 42, -95, -31, -12, 55, -6, 80, 44, 77, 8, 63, 61, 21, 51, 24, -88, 13, -73, 33, -3, -102, 86, -53, 20, 83, -87, -110, -88, -18, 102, 11, 77, 64, 56, 18, -14, -33, 58, 45, -26, 29, -80, 33, 18, -90, 86, 71, 69, -91, -41, -77, 92, 57, 87, 40, -49, 26, -24, -25, -19, 69, 112, 83, -19, 14, 95, 17, 72, -19, -5, -91, 15, 61, 36, -10, 23, -50, -3, -62, -61, -92, -73, 18, 24, -74, -59, 2, -46, 11, -92, -16, -92, 45, 13, -13, -35, -62, -71, -2, 127, -81, -25, 91, 0, 20, -34, 25, 75, -76, 2, 56, -73, -27, -13, 86, 0, -8, -38, 77, -54, 84, -79, -119, 23, -32, 114, 8, -40, 1, 78, -82, 73, -110, -11, -60, -81, 31, 46, -71, 42, 68, -37, -22, -5, -24, -5, -50, 72, -58, 17, 53, 88, 7, -59, -116, -46, 74, 109, -24, -42, -40, 52, 32, 66, -56, -19, 17, 11, -31, 29, 13, -38, 34, -50, -93, -85, -51, -4, -24, 123, -30, 9, 27, 36, -73, -78, 37, 33, 22, 38, 85, -1, -78, 96, -42, 94, 88, -14, -35, 75, 81, -13, 39, 73, 73, 81, 24, 39, -97, -85, -1, 70, -43, 3, 31, -91, -79, 76, 40, -53, 2, 88, 83, -36, 50, -26, -9, 78, -75, 19, 53, -73, 23, 23, -69, -36, -32, -44, 11, 61, -60, -47, 32, 110, -113, 111, 55, -54, -52, -22, -99, 21, 34, 74, 0, -100, 5, 41, -86, 111, -36, 39, 12, -85, 60, 87, 2, 28, 36, -14, 28, -26, 24, 7, 46, 34, -35, -62, -52, 32, -38, 52, -61, 57, -78, 107, 94, -94, -59, -80, -76, 100, -110, 41, -82, -37, 60, -21, -46, 66, -32, -57, 56, -59, -17, 23, -51, 21, -7, -59, -38, 49, 57, -80, 76, -49, 1, 58, -14, -15, -29, 29, 96, 108, 81, 21, 37, -78, -67, -20, 18, 22, 86, 72, 8, -60, 21, 96, 43, -24, 76, 92, -56, -86, 12, 21, -92, 73, 36, 108, -85, 23, -118, 40, 51, -26, 64, 84, 75, -16, 23, -37, -2, -13, -68, -29, 64, -30, -54, -56, -2, 57, -106, 120, -36, 75, -62, 29, 68, -57, -65, 29, 82, 30, 23, 79, -84, 1, -44, 81, 35, -86, 78, 44, -51, 87, 70, 63, -63, -3, 46, 83, -31, 83, 38, 36, 18, 39, 6, 72, 45, 26, -32, 86, 12, -91, 72, 84, -89, -53, 10, -20, -84, 9, 48, 23, 15, -78, -45, 31, 92, 73, -35, -42, -36, 30, -55, -58, -52, -70, -44, -70, -99, -5, -24, -36, -60, 60, 63, 3, 32, 23, 68, 2, 38, -4, -53, 106, 52, 62, -24, -51, -47, -31, 24, 22, -68, -29, -29, 22, -65, 70, -63, 15, 12, 38, -64, 120, -84, -31, -89, -40, -18, 22, -15, 52, -76, 35, 37, 60, -113, -55, 49, -32, -74, -38, -8, -52, -76, 79, 69, -24, 74, 75, 17, -50, 42, 45, -79, 0, 58, 24, -5, 11, 56, 76, -42, 42, -67, -26, 66, 42, -36, 18, 5, -37, 75, 80, -3, -78, 75, 84, -77, -20, 10, -8, 0, 41, -77, -92, -117, 86, 41, -90, 16, 22, 12, -10, -54, 107, 4, 35, -12, 35, -8, 4, 43, -39, -43, 13, -64, 78, 82, 42, -78, -4, 39, 43, 33, -49, -73, 41, -72, 34, 63, -19, 40, 84, 86, -12, -6, 3, -38, -34, -60, 99, 64, 55, 57, 23, -7, -46, 38, 34, -4, 37, 18, -68, -57, -23, -43, -92, -78, -18, 61, 61, -25, 8, 86, 81, -82, -41, -53, 23, 29, -21, 79, 60, -109, 47, -16, 14, -54, 23, 44, -37, -48, -44, -62, 121, 31, -71, -88, 29, 45, -77, -12, 46, -30, -12, -41, 63, 57, 23, -78, 120, -70, 20, 65, 64, -105, -76, -62, -56, 62, -93, 67, -63, 75, 122, -80, 57, -63, 70, -56, -21, -52, 89, 3, -23, -4, 10, -49, 84, 36, 121, -97, -34, 63, -71, -74, -22, -109, -33, 1, -5, -65, -39, -45, 6, -11, 60, -62, 106, -53, 28, -87, -2, 30, 60, 24, -59, 96, 12, -18, 6, -22, -34, 16, 41, 14, 29, -77, -32, 29, 33, -59, -47, -18, -48, -43, 71, 102, -56, -87, -33, 25, -73, -32, 63, -60, 19, 93, 31, -50, -52, -64, 44, -75, -41, -15, 82, 65, -1, 33, 20, -31, -74, 91, -24, -78, 27, -21, -57, 104, 20, 8, 6, -54, -5, 61, -24, 37, -31, 46, -52, -26, 4, 42, -53, 31, -23, 14, 51, -72, 76, 72, -64, -58, -75, -22, 2, -87, 38, -43, 54, -75, 36, 32, -51, -74, -8, 9, -47, 54, 43, -26, 0, -73, 52, 49, 68, -2, 117, -30, 19, 92, 79, 70, 67, 17, -72, 41, 21, 9, 22, 21, -53, 37, -57, 35, -44, -23, -87, -6, -4, 91, 35, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 2,1024 } };
const TfArray<1, float> quant5_scale = { 1, { 0.00081971078179776669, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int8_t tensor_data6[32*3*3*3] = { 
  /* [0][0][][] */ -82,83,75, 0,-36,-95, 115,7,-66, 
  /* [0][1][][] */ -111,111,-5, 28,-53,-21, -60,-10,49, 
  /* [0][2][][] */ 127,-36,26, 110,-38,-7, -90,87,29, 
  /* [1][0][][] */ 28,39,-14, 126,-3,-99, 108,-74,35, 
  /* [1][1][][] */ 21,-40,-60, 122,-112,-2, 53,113,-45, 
  /* [1][2][][] */ 89,-93,-117, 74,91,127, 4,-59,-1, 
  /* [2][0][][] */ -18,-127,-57, 67,30,-77, -38,-88,76, 
  /* [2][1][][] */ 0,-68,-48, -35,68,65, -48,0,11, 
  /* [2][2][][] */ 30,110,-97, 76,-50,42, -71,85,-95, 
  /* [3][0][][] */ -127,110,-43, 29,22,5, 108,-73,-18, 
  /* [3][1][][] */ -82,-46,72, -38,-51,-20, -14,-44,28, 
  /* [3][2][][] */ -115,-122,-5, 73,28,87, 104,1,-84, 
  /* [4][0][][] */ -7,109,-116, 2,34,29, 30,119,116, 
  /* [4][1][][] */ 101,-62,65, -11,-115,117, -24,48,33, 
  /* [4][2][][] */ -54,83,-59, 69,38,88, -105,52,127, 
  /* [5][0][][] */ 77,11,55, 127,60,-11, 18,-42,-112, 
  /* [5][1][][] */ 22,-57,-22, -83,-62,47, -72,-14,-81, 
  /* [5][2][][] */ 20,-116,3, 40,106,64, 78,-2,75, 
  /* [6][0][][] */ -113,-39,-120, 43,82,-45, -21,127,-13, 
  /* [6][1][][] */ 7,-34,-29, -10,-12,-66, 39,-103,86, 
  /* [6][2][][] */ -91,12,-93, 19,58,-6, -90,114,-117, 
  /* [7][0][][] */ -34,57,-25, 45,-69,98, 120,106,55, 
  /* [7][1][][] */ 127,-2,-118, 99,-73,30, -10,119,98, 
  /* [7][2][][] */ 33,-109,-109, 76,-90,-22, 7,21,-48, 
  /* [8][0][][] */ 44,-77,-67, 122,-15,64, 123,-70,-25, 
  /* [8][1][][] */ -92,40,118, -38,-56,-55, -68,-127,54, 
  /* [8][2][][] */ 0,25,-42, 37,-75,85, -120,77,106, 
  /* [9][0][][] */ -12,6,105, 46,27,82, 65,123,-53, 
  /* [9][1][][] */ -27,41,108, 107,-122,91, 100,40,39, 
  /* [9][2][][] */ 44,88,10, -127,75,54, -113,-87,46, 
  /* [10][0][][] */ -105,-104,-63, 38,-4,18, -44,-23,-93, 
  /* [10][1][][] */ -58,-83,109, -77,-16,-40, -57,14,-18, 
  /* [10][2][][] */ -36,73,-122, -88,-127,91, 30,-53,-5, 
  /* [11][0][][] */ 109,-105,35, 121,-2,91, 4,56,-63, 
  /* [11][1][][] */ 111,15,114, 91,-104,105, 92,4,40, 
  /* [11][2][][] */ 92,-127,-93, -25,-46,20, 71,-57,-37, 
  /* [12][0][][] */ 52,-63,33, 60,-80,-6, 37,-99,-47, 
  /* [12][1][][] */ 127,73,42, -6,-23,-74, -97,110,22, 
  /* [12][2][][] */ -10,-111,-39, -71,26,12, -27,-44,-93, 
  /* [13][0][][] */ 5,-20,-91, -14,96,43, -68,50,2, 
  /* [13][1][][] */ -56,-67,87, 81,-73,-57, -127,20,121, 
  /* [13][2][][] */ 56,106,41, -45,-108,92, -68,-37,106, 
  /* [14][0][][] */ -76,-2,127, -44,-16,30, -93,-68,124, 
  /* [14][1][][] */ -106,-54,51, -22,20,42, 81,-45,-15, 
  /* [14][2][][] */ -104,105,105, -45,93,32, -69,16,-90, 
  /* [15][0][][] */ -61,-73,59, 127,23,-15, 87,96,-77, 
  /* [15][1][][] */ -46,-5,7, -5,-42,-10, -41,87,109, 
  /* [15][2][][] */ 86,91,-104, 23,18,56, 17,102,72, 
  /* [16][0][][] */ -101,61,-1, -48,-37,4, -127,-78,120, 
  /* [16][1][][] */ -26,93,108, 91,-21,45, 81,-101,-38, 
  /* [16][2][][] */ -74,-71,0, 68,-69,-2, -70,31,-93, 
  /* [17][0][][] */ -52,24,43, -27,55,-50, 0,-19,-41, 
  /* [17][1][][] */ 17,20,117, -11,-28,-19, 110,-27,-46, 
  /* [17][2][][] */ -62,127,40, -26,-24,-51, -67,-81,76, 
  /* [18][0][][] */ -85,-127,2, -40,-28,-34, 5,-109,-45, 
  /* [18][1][][] */ 25,-55,-35, 85,57,-96, -97,-102,-16, 
  /* [18][2][][] */ 0,-41,119, 112,31,20, -64,-51,115, 
  /* [19][0][][] */ -42,-9,30, 99,-116,105, -33,17,-34, 
  /* [19][1][][] */ -19,25,91, -127,-56,-26, 76,-27,93, 
  /* [19][2][][] */ 5,98,120, 81,26,74, 35,-96,-120, 
  /* [20][0][][] */ -101,7,28, -19,-37,8, -27,-22,-117, 
  /* [20][1][][] */ -86,-31,-97, 9,-100,-46, -78,-80,127, 
  /* [20][2][][] */ 96,44,116, -117,70,-26, 18,122,36, 
  /* [21][0][][] */ 22,-48,-8, -73,-62,89, 127,124,-51, 
  /* [21][1][][] */ -70,-124,37, -82,-46,117, -95,71,73, 
  /* [21][2][][] */ 66,38,-30, 88,-22,20, 91,16,89, 
  /* [22][0][][] */ -121,104,-55, 34,-16,0, -109,-127,-24, 
  /* [22][1][][] */ -82,-27,-51, 35,-87,-92, 108,-75,39, 
  /* [22][2][][] */ -13,-25,42, 103,36,-5, -2,-12,88, 
  /* [23][0][][] */ -41,-31,-87, -12,90,115, -80,-82,-24, 
  /* [23][1][][] */ 44,-19,87, -44,74,39, 105,79,55, 
  /* [23][2][][] */ -127,56,-86, 72,-112,-45, -57,-16,107, 
  /* [24][0][][] */ 63,80,90, -118,-53,50, -5,12,63, 
  /* [24][1][][] */ -126,-47,-93, -20,127,-8, -63,-20,113, 
  /* [24][2][][] */ -82,-33,84, 30,-10,50, 116,-94,-59, 
  /* [25][0][][] */ -71,-111,-100, 75,-20,-96, 9,-57,-67, 
  /* [25][1][][] */ 10,40,-52, 59,-96,-35, 38,-86,113, 
  /* [25][2][][] */ 81,120,120, -123,-14,95, -127,29,-82, 
  /* [26][0][][] */ 103,99,120, -127,76,70, -114,23,69, 
  /* [26][1][][] */ -27,60,-98, -76,-62,49, -7,92,46, 
  /* [26][2][][] */ -86,1,-3, 48,-41,-54, -48,7,42, 
  /* [27][0][][] */ 127,94,22, -83,-55,-89, -33,17,14, 
  /* [27][1][][] */ -87,-85,48, 57,120,-104, -112,-6,-83, 
  /* [27][2][][] */ 15,-87,-48, 40,98,-95, 94,-111,114, 
  /* [28][0][][] */ 68,27,101, -81,-51,-96, -46,-78,-102, 
  /* [28][1][][] */ 49,-19,-68, -127,-48,103, 96,48,106, 
  /* [28][2][][] */ -4,-22,59, -65,-66,-80, 34,-104,73, 
  /* [29][0][][] */ 5,-56,7, 10,69,-29, -73,42,77, 
  /* [29][1][][] */ -49,92,45, -127,-32,-99, -100,47,96, 
  /* [29][2][][] */ 47,18,-86, 93,100,112, 13,-52,4, 
  /* [30][0][][] */ -98,53,55, 45,-88,80, -30,-110,103, 
  /* [30][1][][] */ 96,77,-127, 32,114,119, 40,-71,-60, 
  /* [30][2][][] */ 62,47,-7, 47,30,7, 80,3,-15, 
  /* [31][0][][] */ 87,66,-21, 36,-97,127, -96,-39,-62, 
  /* [31][1][][] */ 60,87,84, 47,-109,-103, -75,-29,23, 
  /* [31][2][][] */ -93,-77,-40, 115,-20,62, -9,-20,85, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 32,3,3,3 } };
const TfArray<32, float> quant6_scale = { 32, { 0.0011541141429916024, 0.001036703702993691, 0.0012301095994189382, 0.0010776458075270057, 0.0010810343082994223, 0.0011258771410211921, 0.0010261846473440528, 0.0011153684463351965, 0.00094867625739425421, 0.00099170813336968422, 0.0010369078954681754, 0.0010689441114664078, 0.0011349519481882453, 0.0011735854204744101, 0.00109465466812253, 0.001157785183750093, 0.0010662772692739964, 0.0011391992447897792, 0.00099725963082164526, 0.001126372255384922, 0.001138540799729526, 0.0009437127155251801, 0.0011856443015858531, 0.0011273807613179088, 0.0010703633306547999, 0.0011408008867874742, 0.0011024922132492065, 0.0010993559844791889, 0.0011108813341706991, 0.0011856039054691792, 0.0010685835732147098, 0.0010755498660728335, } };
const TfArray<32, int> quant6_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[16*3*3*32] = { 
  /* [0][0][][] */ -78,-46,-57,105,-38,-95,91,-52,87,-16,-93,-26,-25,-95,50,-54,65,-70,84,69,23,91,81,20,107,-41,-54,73,-29,-47,-74,89, -2,-2,87,14,-49,-58,-79,-112,-83,43,-98,34,79,75,43,32,29,-12,-105,97,53,-86,-5,80,49,-8,-52,-9,11,-64,-115,-83, -106,-14,-83,9,-52,27,23,92,-73,74,79,59,-29,-15,-57,49,23,-80,24,4,25,65,-60,44,56,-100,45,-90,-96,-63,-82,36, 
  /* [0][1][][] */ 66,-58,-53,87,64,-28,49,-97,-87,-16,-87,-32,-85,-64,41,80,-23,72,-48,64,87,92,17,-5,24,22,-14,29,7,86,43,-100, 25,-102,54,-48,14,23,88,23,-22,95,-19,-55,-94,4,55,83,95,-79,-26,34,-113,56,5,2,-97,-38,-99,-105,-95,-50,2,-44, 48,13,0,37,58,70,-4,-86,-111,76,86,85,-49,-51,-25,98,-99,2,76,-8,-117,-22,-4,80,49,7,77,51,-109,16,-13,45, 
  /* [0][2][][] */ 5,-22,-79,-74,-92,87,20,70,-127,-39,104,-41,-95,-91,-97,3,13,-19,61,49,31,-22,2,-27,-119,-23,-31,-19,53,-32,-99,-100, -11,-74,-45,-58,2,-43,39,95,-98,-41,95,117,34,-97,-33,64,26,-46,74,46,26,11,-15,46,51,-53,-48,42,-83,-85,-95,-21, -42,33,89,-24,-16,99,-49,98,35,36,70,103,107,17,-73,97,-47,-39,42,78,77,98,-16,64,-4,-85,69,-72,-52,-64,-27,55, 
  /* [1][0][][] */ -75,76,-73,-79,6,-49,68,32,-68,-52,-45,6,-76,59,14,-20,56,101,55,100,92,-24,-77,33,127,-82,6,67,75,45,14,38, -63,37,107,5,25,-28,-95,-81,-17,-22,112,-29,-36,-53,119,100,106,-15,93,80,-70,9,-75,-45,-18,90,-21,-18,42,-92,-79,15, -65,8,-1,68,77,-60,98,-30,8,68,47,-59,17,111,113,-7,106,123,-84,-57,88,-51,76,102,52,49,73,-35,-63,-103,-57,-14, 
  /* [1][1][][] */ -100,-7,6,-70,44,-37,8,-99,43,29,9,-75,61,89,95,-24,-1,-44,-30,72,-64,35,46,20,9,-73,115,-7,25,15,-66,-52, -116,-18,74,-3,39,-126,-8,-11,-33,-13,65,-87,33,51,90,-25,19,-98,-110,83,-22,-61,-37,81,84,-85,30,38,47,-102,31,54, -16,-103,7,-27,-56,-79,92,23,4,-37,-5,-57,56,-45,85,100,63,-34,50,-47,-44,54,-30,85,-82,-68,58,85,65,31,96,-32, 
  /* [1][2][][] */ 1,6,-4,-8,98,-121,96,19,6,-8,-92,82,-81,-17,-54,-64,49,0,-22,-96,48,-34,29,-103,-5,-37,-34,37,-101,63,83,62, 110,-82,-23,89,69,-99,15,48,-74,81,-80,-73,57,44,94,-54,-122,-84,-17,111,51,-65,-69,105,95,77,28,-84,-34,85,-114,-47, -34,-100,37,-57,54,-98,-25,26,58,72,14,-68,38,14,-6,-108,3,31,-98,-30,-75,-43,-103,14,117,61,68,-107,40,103,72,93, 
  /* [2][0][][] */ -79,58,-82,-73,7,76,-92,-105,105,-10,-24,89,48,-49,-84,60,-49,-60,-43,-91,41,20,32,2,61,66,95,100,66,86,-5,-57, 72,-41,-60,-20,34,-59,-59,7,62,-19,71,82,21,54,-85,72,-5,51,69,-51,72,93,79,-1,44,8,-16,56,56,85,-20,-27, 29,89,77,-48,-77,-64,57,75,-32,-97,-67,-7,124,59,-99,2,71,58,-3,65,-76,26,-42,-100,46,-56,73,88,61,58,82,39, 
  /* [2][1][][] */ -43,70,-26,-5,-4,73,-58,-104,97,-49,-102,-39,29,85,-87,-90,64,-51,-93,-27,0,-63,13,74,95,49,53,107,30,34,-2,119, -27,31,-15,86,68,-11,-38,-27,-25,27,-66,2,-65,61,34,-98,57,-22,-87,-99,62,-96,-80,-77,-74,-92,-14,-91,-74,-28,69,60, 92,-83,79,80,60,42,59,-43,84,-10,-82,-98,16,-79,-28,88,-6,-16,19,-34,55,-40,40,48,24,-19,-67,-34,-80,25,-105,2, 
  /* [2][2][][] */ -43,71,56,15,-41,91,-18,-106,68,-53,-46,-36,110,-67,-92,-53,-51,116,83,39,72,-75,11,14,94,73,16,14,43,68,-101,-79, 18,-44,-86,-86,14,-78,-12,64,-58,90,31,84,127,28,-24,26,31,65,67,21,-46,63,-6,-24,58,-39,70,49,25,26,21,-104, 111,-25,-17,84,-13,-8,115,83,51,-38,81,-43,83,-2,80,-47,51,82,-37,-81,30,-47,15,23,-22,-103,-21,59,58,58,-16,-62, 
  /* [3][0][][] */ -74,38,12,3,-37,106,-30,104,-22,-29,24,105,59,94,81,-12,23,-121,48,14,-37,69,68,-60,-12,-102,-43,91,99,-42,-10,109, 13,96,114,12,-39,1,21,8,-24,-37,-43,30,6,-17,-14,20,-103,-112,87,100,-85,79,-113,-124,-117,66,73,56,-52,-52,95,-27, -73,46,70,-100,-14,79,65,89,49,-107,-98,98,-75,-77,65,-90,-45,-99,104,86,126,76,-38,-83,-57,-8,7,-23,95,-86,-19,103, 
  /* [3][1][][] */ 19,-83,80,71,-87,89,37,-32,3,108,-65,36,-53,-6,-14,-18,-27,-18,76,66,107,57,28,-22,-76,101,-102,-92,-64,110,-105,8, -44,88,-85,-5,-87,-89,-86,-69,110,6,0,45,104,44,-101,-49,74,20,-70,41,110,51,-81,39,91,-80,-102,-121,-7,-70,53,-97, 117,74,5,25,-104,-37,-48,-28,-68,-52,-106,12,13,85,45,-27,-126,-70,121,-64,-58,-46,97,103,127,-11,55,15,66,-104,-119,-14, 
  /* [3][2][][] */ -1,20,-41,-77,87,-95,102,-24,19,37,89,-71,5,63,103,112,51,87,12,-91,-68,-23,-14,-80,-64,-57,113,91,-18,87,-82,-127, 7,-71,-114,53,-50,33,15,123,-50,79,-38,-68,81,56,-15,11,-1,-63,104,-50,-6,117,20,51,113,5,-85,-94,-31,-33,-16,-33, 62,-15,-46,28,22,102,89,4,-30,106,-85,11,-43,87,-55,115,-13,-125,-103,98,-18,-89,57,-1,28,-84,-41,88,-82,-22,-83,28, 
  /* [4][0][][] */ 20,58,98,5,62,-53,-28,78,-92,-20,20,-28,-57,-85,12,108,101,-83,105,97,-61,102,-87,98,-52,65,-115,-12,-57,-22,-102,-90, -73,-28,-20,-88,69,71,-98,-16,-25,-106,-37,94,-88,-30,-43,-17,-23,-48,6,19,-97,-14,-91,-2,9,41,-114,64,-73,-43,-40,96, -27,67,91,-3,94,-30,-37,-86,-95,-2,-78,-89,42,-18,5,-28,-18,42,90,-80,65,-13,93,-42,-96,44,82,78,-15,-66,-39,52, 
  /* [4][1][][] */ -90,10,90,-62,-81,1,-50,75,-5,100,57,61,-22,25,-127,-69,-18,101,97,-28,-46,-31,-34,-52,96,0,-27,98,112,48,-10,-34, -13,110,-85,-41,-93,89,84,-47,16,15,49,-44,-67,-12,-122,71,-46,104,-22,74,-50,22,70,-10,-28,15,-98,99,-18,83,88,0, 89,-97,70,-22,-77,-105,102,-87,91,-28,52,89,32,-62,67,-66,-51,-44,105,-65,-111,-116,11,119,-10,-62,63,34,94,-47,-42,-32, 
  /* [4][2][][] */ 45,69,-96,-98,42,-7,67,-12,-39,-42,48,89,33,89,12,-32,73,11,-95,5,-80,117,52,-6,-48,23,115,-87,80,-92,104,12, -65,-28,-91,-22,78,117,9,76,40,101,-19,42,100,-49,34,12,70,82,-84,-105,-96,-92,29,100,33,-47,-40,38,-25,77,102,126, 110,-33,-31,88,24,-40,100,76,25,-13,53,-72,-54,-34,2,-24,-22,96,-10,-80,-19,44,-90,-96,109,53,-71,-57,30,24,-68,16, 
  /* [5][0][][] */ 64,-59,-91,43,72,95,-1,90,-57,-84,-88,45,39,91,-58,-64,-43,15,58,0,85,2,-92,63,-86,68,52,6,-83,-53,-11,89, -12,-27,-6,-46,36,-23,-36,-76,-47,105,-2,27,-63,23,123,64,-62,-93,16,98,-34,96,-96,-9,-2,105,15,-66,92,78,72,-16, -88,-10,47,77,22,70,59,-7,-13,-64,21,-43,34,-98,-51,-56,-31,59,-90,103,0,-93,54,18,12,-16,-6,86,39,69,-47,-36, 
  /* [5][1][][] */ 25,-78,28,-105,43,79,-74,44,74,-59,92,-33,50,-55,-40,-26,-25,97,-19,-3,-103,57,-83,-6,-23,58,-34,-24,18,-101,-104,-80, -10,-88,-36,109,68,-18,40,6,-68,-1,-61,-13,-116,79,85,-80,-89,51,-97,81,-45,-50,-23,-18,68,30,-10,-78,108,-59,24,-76, -100,-102,54,-68,-63,-99,72,28,-80,21,-92,68,-65,-44,-8,-16,-16,-61,-73,2,70,68,-3,-45,35,-3,-45,-121,91,-87,45,-110, 
  /* [5][2][][] */ -93,-97,-73,-64,91,-6,-127,2,-30,-43,60,79,-6,-78,48,-40,104,-41,-109,5,-61,-2,13,102,-57,32,3,35,-76,99,91,87, -12,-83,-39,-29,-59,78,-60,19,87,-56,30,79,39,-49,67,99,87,1,77,57,11,64,-79,-75,-80,6,91,-72,54,-64,91,-105, 31,-20,23,86,92,-18,31,33,58,19,62,-98,15,-13,59,-42,56,-50,-1,47,83,57,-39,72,58,26,25,-7,-5,28,89,2, 
  /* [6][0][][] */ 78,9,46,85,11,43,-71,63,50,-8,42,-104,18,101,-10,-114,-59,69,0,-45,63,-70,-13,-40,16,18,-11,-73,-95,20,12,-42, 113,-1,-82,71,-7,19,127,-88,-71,9,-12,-11,-17,29,-1,-86,-4,1,33,-6,79,84,-25,109,40,98,-90,-35,-88,105,-31,46, 38,27,-70,28,63,39,8,97,-107,76,109,-75,5,-81,-28,82,-42,-48,-58,-73,80,60,111,-2,-44,-88,104,-65,83,-93,-95,-31, 
  /* [6][1][][] */ -38,-28,28,-84,10,37,55,-66,11,7,101,18,15,15,0,-99,-85,15,34,-102,-80,-4,-79,-67,52,-101,-104,-2,-73,63,60,39, 38,74,-119,10,71,-62,120,75,72,-2,-98,-50,-96,-82,80,-5,-111,-70,79,83,66,-90,16,8,47,-81,56,76,-33,-66,-101,-45, 27,-83,-48,44,28,-26,-66,44,-79,26,57,76,-39,45,-48,-2,10,89,-40,-18,-86,53,-33,54,30,17,69,-32,-63,-32,-56,-69, 
  /* [6][2][][] */ 54,16,78,86,5,-35,59,4,-67,25,65,-17,21,5,-87,-58,-39,62,67,-71,-30,-35,17,-69,12,-80,-79,-98,40,-75,19,-93, -5,68,9,20,56,-20,-90,-37,22,27,-32,-51,-44,-75,-73,-23,-36,4,50,39,91,-93,20,66,-62,16,-45,42,57,6,15,45, 91,115,32,-114,104,21,67,30,-93,-66,99,-83,-12,-62,59,-73,-21,110,102,-35,-39,-70,-74,41,-51,-108,-64,19,-21,-30,31,-65, 
  /* [7][0][][] */ -51,-78,87,-7,-35,93,92,27,51,-80,-62,31,94,82,100,-100,-98,-87,-60,24,61,36,-45,99,71,16,-53,50,82,104,12,-38, -30,49,114,66,44,-52,10,-32,59,-91,-63,98,89,6,40,-86,89,106,92,38,60,-83,-81,88,-63,-8,6,98,-67,-27,-35,-28, 60,-11,114,-114,0,8,-26,26,-18,-61,92,-57,-50,-98,34,-58,-13,-6,-72,-47,72,-74,-85,86,62,-59,-81,52,52,-79,14,11, 
  /* [7][1][][] */ 21,62,-102,0,64,-46,-76,-39,-23,2,-48,-66,-87,51,105,-50,-2,-43,-83,-77,42,74,-73,81,126,-68,25,75,41,92,40,-8, -65,-92,50,9,20,-95,76,69,-56,-20,-49,-48,64,87,66,5,110,124,-25,-56,60,114,91,92,93,-96,-9,8,86,-84,-101,-58, 79,10,-77,-63,103,-81,-117,56,114,106,-112,77,-104,5,95,58,49,42,56,-70,94,105,-27,54,88,89,-18,97,124,-35,-45,0, 
  /* [7][2][][] */ 72,28,74,-78,106,16,108,-59,93,21,-58,-108,80,127,3,13,-112,-11,41,48,-91,-76,10,-30,20,-89,116,52,77,-59,43,10, -71,-15,97,-69,61,-24,-111,-2,-37,60,65,-78,21,30,124,102,-75,47,-80,-30,-24,-17,-86,27,60,39,80,100,120,73,-33,-60, -53,-82,-63,-39,-84,49,34,-55,74,50,66,-84,-76,-38,-36,36,45,61,16,-34,-42,35,45,112,83,-80,-5,30,105,62,-82,-106, 
  /* [8][0][][] */ -71,-39,87,-44,-44,-10,0,110,-11,-31,-86,114,93,30,50,73,5,-89,64,-99,-7,-68,103,37,-47,-101,-73,-44,46,-97,24,68, 93,-27,24,-13,73,87,-22,103,-39,77,-42,87,-63,-20,46,7,-6,-5,-93,102,-96,-101,32,30,-48,55,28,-62,-72,-81,-83,-95, -29,15,-88,-12,-73,-54,-44,-30,34,-47,36,-69,-78,6,-73,88,61,-72,48,-14,-2,-94,35,98,89,78,90,-44,-87,-94,84,-78, 
  /* [8][1][][] */ 0,59,-93,-14,-56,-50,-17,-79,-99,49,-37,36,89,8,-127,1,-49,-9,77,31,99,-75,-59,-18,-82,-64,-60,-90,36,101,56,-74, 85,26,-60,108,11,112,84,-86,100,-55,19,22,-41,-102,-36,-9,-45,-73,36,-38,20,40,78,117,88,93,-64,24,-27,-20,80,57, 116,52,57,38,43,-55,-69,84,-75,86,-11,76,39,107,-60,115,-96,-12,28,-63,-44,-71,93,-77,34,59,-64,-85,12,80,-96,19, 
  /* [8][2][][] */ 102,-48,-119,98,86,115,8,89,-57,36,-74,43,39,48,92,-31,99,-111,-10,-67,-46,16,-86,-111,-85,-82,-80,-49,-56,20,-25,89, 0,98,-84,-80,116,-91,70,83,-55,-84,-70,-62,-2,-23,44,2,105,-57,85,116,8,2,-75,-3,-101,-62,-16,95,-11,85,97,-20, 103,-67,59,9,-98,-97,-36,-14,-64,99,-1,-54,121,-44,6,-60,-35,16,-16,-63,42,43,-16,10,-93,115,70,87,50,-54,0,118, 
  /* [9][0][][] */ -23,-99,34,-13,85,77,-116,-31,20,109,102,-91,33,62,127,-51,-98,1,82,21,40,-15,36,35,-56,65,60,109,109,21,-26,-61, 18,33,-11,38,-18,95,39,-3,-2,-27,-26,-5,61,70,-76,51,-16,3,4,-6,-13,100,30,96,-54,-39,-85,-75,107,-25,46,76, 94,-123,-114,-79,27,55,9,-63,13,59,64,-91,-38,73,-30,-90,-4,121,62,-31,95,-68,27,-23,96,98,87,93,-44,76,-73,31, 
  /* [9][1][][] */ -17,49,80,65,104,-91,22,-34,77,24,-63,28,69,-37,-7,-47,-84,58,-64,55,-3,-40,81,70,-75,-78,41,-62,-61,51,11,66, 95,-45,-98,-37,-99,-4,-8,-23,120,47,14,-95,-40,-52,124,22,-61,-69,32,-97,44,-27,64,-22,-72,-10,-25,-69,42,28,-91,-116, -16,22,-37,-34,-65,-55,56,-48,-11,-33,-21,-21,-100,112,31,48,116,-59,-39,18,-67,-23,-83,-40,113,-42,-1,-5,40,-33,13,-40, 
  /* [9][2][][] */ 36,1,-56,-27,70,-1,32,-28,84,63,-1,-97,73,5,21,-31,107,83,54,-19,103,25,42,113,39,88,-17,-96,1,34,-34,-86, 109,-58,27,-27,112,-18,59,-100,-37,-41,-22,12,45,-23,64,71,-100,17,55,17,-65,39,68,60,61,34,80,3,-76,-13,-83,-94, 106,-68,-65,-34,65,15,-28,-59,41,3,66,-88,73,-32,47,108,4,111,-64,51,52,70,42,57,127,-15,57,-102,-57,-61,-26,20, 
  /* [10][0][][] */ -13,18,80,-10,-14,-117,-56,40,122,17,17,42,118,34,107,-109,4,-5,-13,-125,-55,-46,119,-55,56,104,69,83,-80,-60,-84,43, 25,-119,-56,-10,-10,-83,-124,8,-121,98,62,-97,41,-114,-23,110,-31,-78,-80,105,24,11,8,34,46,-78,80,1,-118,13,-19,-39, 46,31,103,-96,-84,-106,-84,-93,12,-76,67,60,-88,-16,-34,-6,123,-6,15,-84,37,63,100,-117,-41,-49,104,7,75,59,-37,110, 
  /* [10][1][][] */ 33,-18,37,15,40,84,-76,111,53,78,-91,-62,-55,116,-35,-50,97,-107,87,28,-104,-110,108,-32,34,62,-61,54,-107,98,66,28, 108,-75,85,-1,-110,120,24,-124,-42,-27,-16,-31,-53,-99,109,-122,-67,43,74,-27,-72,-68,-103,-10,-119,2,74,28,92,-115,-96,-42, -14,-38,42,58,-57,-72,-26,32,79,-96,5,52,-124,-8,64,2,-87,-61,-62,121,-69,-47,56,126,-85,20,69,-100,57,-108,67,-122, 
  /* [10][2][][] */ 92,-25,-89,57,-114,90,-36,-2,-105,-56,-91,39,33,92,47,-84,60,-95,127,98,18,112,-40,58,56,-78,41,121,119,-3,51,-13, 9,-16,-14,52,62,-76,66,30,-66,9,-93,91,-39,-83,-101,66,-10,-34,82,-103,-92,-118,41,94,45,-119,-110,-107,-125,21,-116,56, 95,9,-83,-16,-43,99,-30,-96,-51,45,99,46,15,55,-29,-107,77,-126,89,52,-66,28,-118,-109,71,70,-26,51,81,-1,-84,16, 
  /* [11][0][][] */ 16,-67,-17,67,-31,-90,78,-1,-43,91,80,-56,-66,-13,16,122,55,36,-115,93,106,-102,98,30,-43,30,-68,64,15,91,8,26, -72,-55,122,31,-28,3,40,-97,65,-67,-41,-76,11,42,39,28,-121,-126,-34,96,76,37,11,-112,-88,-11,-3,-6,-48,-69,-74,-46, -100,15,65,60,77,-4,93,-52,85,35,-37,-121,-15,-59,-107,19,53,-40,69,-23,-3,-33,-121,-23,-44,115,116,125,29,112,122,88, 
  /* [11][1][][] */ 111,56,-96,13,-75,12,115,14,93,-118,-87,-113,-117,119,-29,36,13,-94,-120,26,27,24,84,-74,-24,79,-73,-14,60,-1,-120,-43, 66,-39,-84,-122,113,-78,-54,49,-55,-115,32,-106,91,-12,-65,12,25,-119,-67,-61,-124,-120,-27,-109,89,4,-28,-9,-94,17,54,57, -106,-38,-76,-118,104,-94,75,-46,-104,-75,4,-50,79,-66,-50,-124,-102,-110,13,12,-108,-14,27,8,46,-7,113,-6,-41,45,107,31, 
  /* [11][2][][] */ -53,-23,-63,-68,66,-127,-62,-21,4,120,120,-106,-77,-36,85,-3,124,58,-17,-26,-116,85,17,-56,-92,-51,-56,92,123,103,-78,-108, 52,-11,-121,-34,-65,120,3,75,-115,-60,-109,119,124,66,-85,-81,49,15,-115,-116,-73,111,-24,-28,59,22,-85,84,17,-76,-114,46, -59,72,79,-47,13,48,125,74,-54,-111,-106,-10,16,3,124,13,42,-84,74,-13,-79,31,-88,-119,66,-2,-107,-67,-19,3,46,17, 
  /* [12][0][][] */ 58,-10,-116,-32,39,61,45,-108,-16,-18,102,-16,59,-73,91,33,6,52,-63,-63,-31,51,-18,77,-72,65,14,33,60,77,-35,25, 53,-48,75,-99,14,26,-104,23,112,-10,-105,24,-6,-51,-62,51,-27,-48,127,11,-15,-5,-46,103,-4,-43,-28,14,-59,-42,-80,-39, -53,35,-20,57,-64,-80,-86,-45,118,3,21,13,-59,55,-20,-57,31,29,-10,13,-96,85,-34,-87,-39,45,-102,26,-12,80,64,-28, 
  /* [12][1][][] */ -54,68,21,-110,3,-17,-5,14,30,80,83,70,91,29,98,-60,77,57,-29,91,93,51,-95,-65,8,-51,-81,-40,118,-14,-64,98, -34,91,72,55,-17,25,-32,52,-49,63,-28,-122,24,61,-10,63,-26,-14,57,-17,80,-42,92,114,82,61,-14,-47,94,-37,-35,44, 48,48,-58,-32,-85,-30,4,-107,105,8,-74,15,32,-54,-14,-120,101,-80,110,59,-100,-41,-84,-1,14,-2,77,-43,-72,85,51,-29, 
  /* [12][2][][] */ 9,-54,33,-105,85,2,116,-24,34,72,50,95,-31,69,-80,-32,93,68,-2,-105,-45,84,96,80,52,80,-7,78,20,28,89,-54, 23,28,-91,55,-42,50,-16,-107,-36,-81,-78,36,32,71,-75,34,-56,97,-22,14,88,-24,67,-8,116,-13,-34,-61,-84,-40,-2,91, 0,-77,-54,79,20,-88,-70,0,89,88,46,-51,-19,88,41,-37,17,-97,60,-89,-9,-23,64,51,71,-25,93,45,-16,-23,77,118, 
  /* [13][0][][] */ -15,29,-72,82,-84,-74,-45,-85,-68,-37,31,-31,76,10,-87,-79,-30,-88,-77,65,-18,44,67,-32,75,-20,73,25,33,-2,103,68, -54,35,60,-102,-10,87,-58,40,126,-103,29,-79,-46,12,124,15,58,48,-8,-21,-53,44,119,2,56,-33,-38,-21,76,5,68,-80, -109,0,92,-22,65,45,-33,46,-56,-55,-37,101,58,27,24,-1,-78,-81,-54,-7,68,-97,-90,27,-75,-14,60,11,66,39,14,111, 
  /* [13][1][][] */ 66,-57,26,-20,-28,74,-69,78,10,45,88,34,-15,-5,81,-101,77,-96,91,-10,33,-82,-101,-5,-77,48,69,-31,76,111,-68,32, 18,22,-85,9,-23,-19,-114,49,6,-44,82,-9,0,90,51,-23,-81,109,121,-36,-78,111,59,18,91,-106,-58,78,40,88,30,105, -24,-64,-63,-46,71,93,75,-105,71,46,-28,-103,84,-105,-63,99,-6,99,116,-65,-38,-76,-35,70,117,-51,-55,110,77,-102,-29,-117, 
  /* [13][2][][] */ 90,-52,10,62,-115,84,68,-20,-51,-41,-73,101,-24,48,90,49,61,97,-84,-116,43,-80,-104,-16,-110,-11,-74,125,33,8,-60,-97, 112,-91,-12,-35,-102,-21,-113,26,29,75,34,-53,63,-71,-82,65,-44,-1,79,106,83,-17,100,89,-28,-9,16,-97,110,105,-50,-50, -15,-127,42,102,90,-96,-60,-41,-41,32,-65,-96,11,-47,-85,-102,-3,103,-70,-22,-79,116,3,-97,15,29,60,96,50,32,26,-100, 
  /* [14][0][][] */ 25,42,79,59,-89,127,-71,-92,19,65,-97,31,71,1,-5,-34,-33,90,71,-62,-10,66,22,0,-85,-3,101,-66,14,-43,81,22, -74,117,61,-35,-39,-57,9,89,31,120,-98,98,-57,-103,65,10,64,34,11,111,-17,-58,-3,77,69,105,108,-23,34,-85,-66,121, 85,36,119,-24,98,42,-7,-60,-30,54,44,71,-46,-71,-47,12,99,-54,-21,126,68,47,-94,69,46,42,40,23,-29,39,-90,-36, 
  /* [14][1][][] */ 83,108,12,-64,101,-73,47,7,58,83,103,37,-78,-47,88,27,-72,68,73,7,9,115,36,27,-16,89,-49,71,27,82,105,69, -96,90,62,-78,61,89,76,48,1,-73,33,10,-125,110,30,-38,58,-113,73,5,41,-46,-62,10,110,21,51,41,25,-90,111,12, -79,-69,-81,-96,-39,94,-118,67,53,-4,36,-67,103,-70,-79,-8,24,43,19,-84,-6,54,-82,68,41,6,-99,-65,-19,79,77,-89, 
  /* [14][2][][] */ 19,-23,88,110,-46,-88,-110,3,87,-86,-17,-34,-56,-49,-99,-7,18,-39,-22,-29,85,-100,-17,11,84,-92,96,40,-79,54,-92,-65, -107,35,66,-75,-91,-27,-84,62,-1,-40,72,57,-18,-36,-8,-94,23,68,18,-109,-3,-37,101,-47,87,-15,-14,62,62,-49,-45,-43, -38,37,31,38,-80,112,41,-19,83,-37,-1,-55,49,-19,41,16,-95,-59,-61,88,14,16,-30,63,-82,-108,-72,91,-3,29,-99,113, 
  /* [15][0][][] */ 97,47,-25,73,-55,-91,-91,-2,-29,33,-9,-80,92,86,114,16,85,-72,43,-88,-42,49,-76,40,7,19,30,-108,-72,-43,31,-23, 5,36,-57,-72,-43,72,32,114,15,-71,32,-61,-14,97,96,40,-76,-13,5,21,51,-4,-104,45,103,71,110,-33,35,9,-37,-25, 58,-21,-65,-18,-39,62,102,94,108,-127,0,10,81,-25,-49,95,-116,48,20,33,19,32,66,37,99,-23,-61,-34,-71,-120,-72,69, 
  /* [15][1][][] */ -69,-10,53,-34,-71,-98,-86,-78,61,74,58,-60,50,51,94,50,98,51,109,-27,-85,-25,88,-28,51,-83,25,81,112,10,0,-79, 38,98,19,45,-85,-96,-64,-40,-82,10,-16,30,-74,-1,21,-74,-78,-8,-117,51,-16,36,41,-59,76,-11,-20,114,-29,-82,63,65, -81,33,60,16,34,-23,12,-124,101,-95,35,-64,25,24,-90,-43,-23,-13,-85,8,-22,-75,18,-56,-49,-18,-108,-72,71,55,-77,123, 
  /* [15][2][][] */ 102,-91,89,77,82,-13,121,126,-112,-51,-38,-73,30,-65,49,18,79,-88,115,-103,43,-61,-55,-82,79,-88,-42,-108,-74,30,-114,-4, 69,69,10,97,-3,47,-22,55,-59,-124,62,-22,102,-93,-29,23,-95,65,-6,-106,-55,-25,-100,17,61,29,59,-37,126,17,-65,56, 93,-77,104,43,-4,-69,-42,21,69,33,97,-24,-26,16,69,78,108,84,-81,47,-37,108,46,-97,43,-113,30,-21,-47,-83,-60,-10, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 16,3,3,32 } };
const TfArray<16, float> quant7_scale = { 16, { 0.0010626261355355382, 0.001044959295541048, 0.001099051907658577, 0.0010046068346127868, 0.001027471967972815, 0.001102578709833324, 0.0010739268036559224, 0.0010546701960265636, 0.0010452106362208724, 0.001093355705961585, 0.00093138392549008131, 0.00093481835210695863, 0.0010903277434408665, 0.0010399884777143598, 0.0010475015733391047, 0.00099885393865406513, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<4, int> tensor_dimension8 = { 4, { 1,32,32,32 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0030553636606782675, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,16,16,32 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0030553636606782675, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,16,16,16 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0029966037254780531, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,8,8,16 } };
const TfArray<1, float> quant11_scale = { 1, { 0.0029966037254780531, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<2, int> tensor_dimension12 = { 2, { 1,1024 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0029966037254780531, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,2 } };
const TfArray<1, float> quant13_scale = { 1, { 0.01511322520673275, } };
const TfArray<1, int> quant13_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,2 } };
const TfArray<1, float> quant14_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,6,2 } };
const TfArray<1, int> outputs0 = { 1, { 8 } };
const TfLitePoolParams opdata1 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs1 = { 1, { 8 } };
const TfArray<1, int> outputs1 = { 1, { 9 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 9,7,3 } };
const TfArray<1, int> outputs2 = { 1, { 10 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 10 } };
const TfArray<1, int> outputs3 = { 1, { 11 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 11,1 } };
const TfArray<1, int> outputs4 = { 1, { 12 } };
const TfLiteFullyConnectedParams opdata5 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs5 = { 3, { 12,5,4 } };
const TfArray<1, int> outputs5 = { 1, { 13 } };
const TfLiteSoftmaxParams opdata6 = { 1 };
const TfArray<1, int> inputs6 = { 1, { 13 } };
const TfArray<1, int> outputs6 = { 1, { 14 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension0, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 32768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension9, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4096, (TfLiteIntArray*)&tensor_dimension11, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1024, (TfLiteIntArray*)&tensor_dimension13, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 15;
  for(size_t i = 0; i < 15; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 7; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 7; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  14, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 7; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
